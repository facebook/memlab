"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[9439],{513:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>r});var s=n(8168),t=(n(6540),n(5680));const l={id:"heap_analysis_src",title:"Package: @memlab/heap-analysis",sidebar_label:"heap-analysis/src",sidebar_position:0,custom_edit_url:null},i=void 0,p={unversionedId:"api/modules/heap_analysis_src",id:"api/modules/heap_analysis_src",title:"Package: @memlab/heap-analysis",description:"Classes",source:"@site/docs/api/modules/heap_analysis_src.md",sourceDirName:"api/modules",slug:"/api/modules/heap_analysis_src",permalink:"/memlab/docs/api/modules/heap_analysis_src",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"heap_analysis_src",title:"Package: @memlab/heap-analysis",sidebar_label:"heap-analysis/src",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"core/src",permalink:"/memlab/docs/api/modules/core_src"},next:{title:"ConsoleMode",permalink:"/memlab/docs/api/enums/api_src.ConsoleMode"}},o={},r=[{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:'<a id="analyzesnapshotresult" name="analyzesnapshotresult"></a> <strong>AnalyzeSnapshotResult</strong>: <code>Object</code>',id:"-analyzesnapshotresult-object",level:3},{value:'<a id="heapanalysisoptions" name="heapanalysisoptions"></a> <strong>HeapAnalysisOptions</strong>: <code>Object</code>',id:"-heapanalysisoptions-object",level:3},{value:'<a id="runheapanalysisoptions" name="runheapanalysisoptions"></a> <strong>RunHeapAnalysisOptions</strong>: <code>Object</code>',id:"-runheapanalysisoptions-object",level:3},{value:"Functions",id:"functions",level:2},{value:'<a id="getdominatornodes"></a><strong>getDominatorNodes</strong>(<code>ids</code>, <code>snapshot</code>)',id:"getdominatornodesids-snapshot",level:3},{value:'<a id="getfullheapfromfile"></a><strong>getFullHeapFromFile</strong>(<code>file</code>)',id:"getfullheapfromfilefile",level:3},{value:'<a id="getheapfromfile"></a><strong>getHeapFromFile</strong>(<code>file</code>)',id:"getheapfromfilefile",level:3},{value:'<a id="getsnapshotdirforanalysis"></a><strong>getSnapshotDirForAnalysis</strong>(<code>options</code>)',id:"getsnapshotdirforanalysisoptions",level:3},{value:'<a id="getsnapshotfileforanalysis"></a><strong>getSnapshotFileForAnalysis</strong>(<code>options</code>)',id:"getsnapshotfileforanalysisoptions",level:3},{value:'<a id="loadheapsnapshot"></a><strong>loadHeapSnapshot</strong>(<code>options</code>)',id:"loadheapsnapshotoptions",level:3},{value:'<a id="snapshotmapreduce"></a><strong>snapshotMapReduce</strong>&lt;<code>T1</code>, <code>T2</code>&gt;(<code>mapCallback</code>, <code>reduceCallback</code>, <code>options</code>)',id:"snapshotmapreducet1-t2mapcallback-reducecallback-options",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:'<a id="takenodefullheap"></a><strong>takeNodeFullHeap</strong>()',id:"takenodefullheap",level:3}],m={toc:r},y="wrapper";function g({components:e,...a}){return(0,t.yg)(y,(0,s.A)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"classes"},"Classes"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis"},"BaseAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.CollectionsHoldingStaleAnalysis"},"CollectionsHoldingStaleAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.DetachedDOMElementAnalysis"},"DetachedDOMElementAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.GlobalVariableAnalysis"},"GlobalVariableAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectFanoutAnalysis"},"ObjectFanoutAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectShallowAnalysis"},"ObjectShallowAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectShapeAnalysis"},"ObjectShapeAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectSizeAnalysis"},"ObjectSizeAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectUnboundGrowthAnalysis"},"ObjectUnboundGrowthAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.ShapeUnboundGrowthAnalysis"},"ShapeUnboundGrowthAnalysis")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/heap_analysis_src.StringAnalysis"},"StringAnalysis"))),(0,t.yg)("h2",{id:"type-aliases"},"Type Aliases"),(0,t.yg)("h3",{id:"-analyzesnapshotresult-object"},(0,t.yg)("a",{id:"analyzesnapshotresult",name:"analyzesnapshotresult"})," ",(0,t.yg)("strong",{parentName:"h3"},"AnalyzeSnapshotResult"),": ",(0,t.yg)("inlineCode",{parentName:"h3"},"Object")),(0,t.yg)("p",null,"This is the return type from calling ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis#analyzesnapshotfromfile"},"analyzeSnapshotFromFile"),"\nor ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis#analyzesnapshotsindirectory"},"analyzeSnapshotsInDirectory"),"."),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"analysisOutputFile")),(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"string")),(0,t.yg)("td",{parentName:"tr",align:"left"},"file path of the console output of the heap analysis call")))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L93"},"heap-analysis/src/PluginUtils.ts:93"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"-heapanalysisoptions-object"},(0,t.yg)("a",{id:"heapanalysisoptions",name:"heapanalysisoptions"})," ",(0,t.yg)("strong",{parentName:"h3"},"HeapAnalysisOptions"),": ",(0,t.yg)("inlineCode",{parentName:"h3"},"Object")),(0,t.yg)("p",null,"This is the auto-generated arguments passed to all the ",(0,t.yg)("inlineCode",{parentName:"p"},"process")," method\nthat your self-defined heap analysis should implement.\nYou are not supposed to construct instances of this class."),(0,t.yg)("p",null,"For code examples on how this options could be used, see\n",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/heap_analysis_src#getsnapshotfileforanalysis"},"getSnapshotFileForAnalysis"),", ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/heap_analysis_src#loadheapsnapshot"},"loadHeapSnapshot"),",\nor ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/heap_analysis_src#snapshotmapreduce"},"snapshotMapReduce"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L70"},"heap-analysis/src/PluginUtils.ts:70"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"-runheapanalysisoptions-object"},(0,t.yg)("a",{id:"runheapanalysisoptions",name:"runheapanalysisoptions"})," ",(0,t.yg)("strong",{parentName:"h3"},"RunHeapAnalysisOptions"),": ",(0,t.yg)("inlineCode",{parentName:"h3"},"Object")),(0,t.yg)("p",null,"This is the input option for ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis#analyzesnapshotfromfile"},"analyzeSnapshotFromFile"),"\nand ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis#analyzesnapshotsindirectory"},"analyzeSnapshotsInDirectory"),"."),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"workDir?")),(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"string")),(0,t.yg)("td",{parentName:"tr",align:"left"},"specify the working directory to where the intermediate, logging, and output files should be saved")))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L81"},"heap-analysis/src/PluginUtils.ts:81"))))),(0,t.yg)("h2",{id:"functions"},"Functions"),(0,t.yg)("h3",{id:"getdominatornodesids-snapshot"},(0,t.yg)("a",{id:"getdominatornodes"}),(0,t.yg)("strong",{parentName:"h3"},"getDominatorNodes"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"ids"),", ",(0,t.yg)("inlineCode",{parentName:"h3"},"snapshot"),")"),(0,t.yg)("p",null,"This API calculate the set of\n",(0,t.yg)("a",{parentName:"p",href:"https://firefox-source-docs.mozilla.org/devtools-user/memory/dominators/index.html"},"dominator nodes"),"\nof the set of input heap objects."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ids"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Set"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"number"),">"," | Set of ids of heap objects (or nodes)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"snapshot"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"IHeapSnapshot")," | heap loaded from a heap snapshot"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Set"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"number"),">"," | the set of dominator nodes/objects"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples"),":")))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import {dumpNodeHeapSnapshot} from '@memlab/core';\nimport {getFullHeapFromFile, getDominatorNodes} from '@memlab/heap-analysis';\n\nclass TestObject {}\n\n(async function () {\n  const t1 = new TestObject();\n  const t2 = new TestObject();\n\n  // dump the heap of this running JavaScript program\n  const heapFile = dumpNodeHeapSnapshot();\n  const heap = await getFullHeapFromFile(heapFile);\n\n  // find the heap node for TestObject\n  let nodes = [];\n  heap.nodes.forEach(node => {\n    if (node.name === 'TestObject' && node.type === 'object') {\n      nodes.push(node);\n    }\n  });\n\n  // get the dominator nodes\n  const dominatorIds = getDominatorNodes(\n    new Set(nodes.map(node => node.id)),\n    heap,\n  );\n})();\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L757"},"heap-analysis/src/PluginUtils.ts:757"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"getfullheapfromfilefile"},(0,t.yg)("a",{id:"getfullheapfromfile"}),(0,t.yg)("strong",{parentName:"h3"},"getFullHeapFromFile"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"file"),")"),(0,t.yg)("p",null,"Load and parse a ",(0,t.yg)("inlineCode",{parentName:"p"},".heapsnapshot")," file and calculate meta data like\ndominator nodes and retained sizes."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"file"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"string")," | the absolute path of the ",(0,t.yg)("inlineCode",{parentName:"li"},".heapsnapshot")," file"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"IHeapSnapshot"),">"," | the heap graph representation instance that supports querying\nthe heap"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples"),":")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import {dumpNodeHeapSnapshot} from '@memlab/core';\nimport {getFullHeapFromFile} from '@memlab/heap-analysis';\n\n(async function (){\n  const heapFile = dumpNodeHeapSnapshot();\n  const heap = await getFullHeapFromFile(heapFile);\n})();\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L554"},"heap-analysis/src/PluginUtils.ts:554"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"getheapfromfilefile"},(0,t.yg)("a",{id:"getheapfromfile"}),(0,t.yg)("strong",{parentName:"h3"},"getHeapFromFile"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"file"),")"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("inlineCode",{parentName:"strong"},"deprecated"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"file"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"string")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"IHeapSnapshot"),">"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L585"},"heap-analysis/src/PluginUtils.ts:585"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"getsnapshotdirforanalysisoptions"},(0,t.yg)("a",{id:"getsnapshotdirforanalysis"}),(0,t.yg)("strong",{parentName:"h3"},"getSnapshotDirForAnalysis"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"options"),")"),(0,t.yg)("p",null,"Get the absolute path of the directory holding all the heap snapshot files\npassed to the hosting heap analysis via ",(0,t.yg)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,t.yg)("p",null,"This API is supposed to be used within the overridden ",(0,t.yg)("inlineCode",{parentName:"p"},"process")," method\nof an ",(0,t.yg)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,t.yg)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,t.yg)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Nullable"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"string"),">"," | the absolute path of the directory"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples:"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {getSnapshotFileForAnalysis, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const directory = getSnapshotDirForAnalysis(options);\n  }\n}\n")),(0,t.yg)("p",null,"Use the following code to invoke the heap analysis:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,t.yg)("p",null,"The new heap analysis can also be used with ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,t.yg)("inlineCode",{parentName:"p"},"getSnapshotDirForAnalysis")," use the snapshot directory from\n",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L466"},"heap-analysis/src/PluginUtils.ts:466"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"getsnapshotfileforanalysisoptions"},(0,t.yg)("a",{id:"getsnapshotfileforanalysis"}),(0,t.yg)("strong",{parentName:"h3"},"getSnapshotFileForAnalysis"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"options"),")"),(0,t.yg)("p",null,"Get the heap snapshot file's absolute path passed to the hosting heap\nanalysis via ",(0,t.yg)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,t.yg)("p",null,"This API is supposed to be used within the overridden ",(0,t.yg)("inlineCode",{parentName:"p"},"process")," method\nof an ",(0,t.yg)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,t.yg)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,t.yg)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"string")," | the absolute path of the heap snapshot file"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples:"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {getSnapshotFileForAnalysis, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const file = getSnapshotFileForAnalysis(options);\n  }\n}\n")),(0,t.yg)("p",null,"Use the following code to invoke the heap analysis:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,t.yg)("p",null,"The new heap analysis can also be used with ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,t.yg)("inlineCode",{parentName:"p"},"getSnapshotFileForAnalysis")," will use the last heap snapshot in alphanumerically\nascending order from ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L417"},"heap-analysis/src/PluginUtils.ts:417"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"loadheapsnapshotoptions"},(0,t.yg)("a",{id:"loadheapsnapshot"}),(0,t.yg)("strong",{parentName:"h3"},"loadHeapSnapshot"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"options"),")"),(0,t.yg)("p",null,"Load the heap graph based on the single JavaScript heap snapshot\npassed to the hosting heap analysis via ",(0,t.yg)("inlineCode",{parentName:"p"},"HeapAnalysisOptions"),"."),(0,t.yg)("p",null,"This API is supposed to be used within the ",(0,t.yg)("inlineCode",{parentName:"p"},"process")," implementation\nof an ",(0,t.yg)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,t.yg)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,t.yg)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"IHeapSnapshot"),">"," | the graph representation of the heap"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples:"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {loadHeapSnapshot, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    const heap = await loadHeapSnapshot(options);\n    // doing heap analysis\n  }\n}\n")),(0,t.yg)("p",null,"Use the following code to invoke the heap analysis:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// any .heapsnapshot file recorded by memlab or saved manually from Chrome\nawait analysis.analyzeSnapshotFromFile(snapshotFile);\n")),(0,t.yg)("p",null,"The new heap analysis can also be used with ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,t.yg)("inlineCode",{parentName:"p"},"loadHeapSnapshot")," will use the last heap snapshot in alphanumerically\nascending order from ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L520"},"heap-analysis/src/PluginUtils.ts:520"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"snapshotmapreducet1-t2mapcallback-reducecallback-options"},(0,t.yg)("a",{id:"snapshotmapreduce"}),(0,t.yg)("strong",{parentName:"h3"},"snapshotMapReduce"),"<",(0,t.yg)("inlineCode",{parentName:"h3"},"T1"),", ",(0,t.yg)("inlineCode",{parentName:"h3"},"T2"),">","(",(0,t.yg)("inlineCode",{parentName:"h3"},"mapCallback"),", ",(0,t.yg)("inlineCode",{parentName:"h3"},"reduceCallback"),", ",(0,t.yg)("inlineCode",{parentName:"h3"},"options"),")"),(0,t.yg)("p",null,"When a heap analysis is taking multiple heap snapshots as input for memory\nanalysis (e.g., finding which object keeps growing in size in a series of\nheap snapshots), this API could be used to do\n",(0,t.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MapReduce"},"MapRedue")," on all heap snapshots."),(0,t.yg)("p",null,"This API is supposed to be used within the ",(0,t.yg)("inlineCode",{parentName:"p"},"process")," implementation\nof an ",(0,t.yg)("inlineCode",{parentName:"p"},"BaseAnalysis")," instance that is designed to analyze multiple heap\nsnapshots (as an example, finding which object keeps growing overtime)"),(0,t.yg)("h4",{id:"type-parameters"},"Type parameters"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"T1")),(0,t.yg)("td",{parentName:"tr",align:"left"},"the type of the intermediate result from each map function call")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("inlineCode",{parentName:"td"},"T2")),(0,t.yg)("td",{parentName:"tr",align:"left"},"the type of the final result of the reduce function call")))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"mapCallback"),": (",(0,t.yg)("inlineCode",{parentName:"li"},"snapshot"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"IHeapSnapshot"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"i"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"number"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"file"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"string"),") => ",(0,t.yg)("inlineCode",{parentName:"li"},"T1")," | the map function in MapReduce, the function will be applied to each heap snapshot"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"reduceCallback"),": (",(0,t.yg)("inlineCode",{parentName:"li"},"results"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"T1"),"[]) => ",(0,t.yg)("inlineCode",{parentName:"li"},"T2")," | the reduce function in MapReduce, the function will take as input all intermediate results from all map function calls"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,t.yg)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | this is the auto-generated input passed to all the ",(0,t.yg)("inlineCode",{parentName:"li"},"BaseAnalysis")," instances"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,t.yg)("inlineCode",{parentName:"li"},"T2"),">"," | the return value of your reduce function"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples:"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {HeapAnalysisOptions} from '@memlab/heap-analysis';\nimport {snapshotMapReduce, BaseAnalysis} from '@memlab/heap-analysis';\n\nclass ExampleAnalysis extends BaseAnalysis {\n  public getCommandName(): string {\n    return 'example-analysis';\n  }\n\n  public getDescription(): string {\n    return 'an example analysis for demo';\n  }\n\n  async process(options: HeapAnalysisOptions): Promise<void> {\n    // check if the number of heap objects keeps growing overtime\n    const isMonotonicIncreasing = await snapshotMapReduce(\n      (heap) => heap.nodes.length,\n      (nodeCounts) =>\n        nodeCounts[0] < nodeCounts[nodeCounts.length - 1] &&\n        nodeCounts.every((count, i) => i === 0 || count >= nodeCounts[i - 1]),\n      options,\n    );\n  }\n}\n")),(0,t.yg)("p",null,"Use the following code to invoke the heap analysis:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ExampleAnalysis();\n// snapshotDir includes a series of .heapsnapshot files recorded by\n// memlab or saved manually from Chrome, those files will be loaded\n// in alphanumerically ascending order\nawait analysis.analyzeSnapshotsInDirectory(snapshotDir);\n")),(0,t.yg)("p",null,"The new heap analysis can also be used with ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#analyze"},"analyze"),", in that case\n",(0,t.yg)("inlineCode",{parentName:"p"},"snapshotMapReduce")," will use all the heap snapshot in alphanumerically\nascending order from ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"),"."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Why not passing in all heap snapshots as an array of ",(0,t.yg)("a",{parentName:"strong",href:"/memlab/docs/api/interfaces/core_src.IHeapSnapshot"},"IHeapSnapshot"),"s?"),"\nEach heap snapshot could be non-trivial in size, loading them all at once\nmay not be possible."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L662"},"heap-analysis/src/PluginUtils.ts:662"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"takenodefullheap"},(0,t.yg)("a",{id:"takenodefullheap"}),(0,t.yg)("strong",{parentName:"h3"},"takeNodeFullHeap"),"()"),(0,t.yg)("p",null,"Take a heap snapshot of the current program state\nand parse it as ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/interfaces/core_src.IHeapSnapshot"},"IHeapSnapshot"),". This\nAPI also calculates some heap analysis meta data\nfor heap analysis. But this also means slower heap parsing\ncomparing with ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/core_src#takenodeminimalheap"},"takeNodeMinimalHeap"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"Promise"),"<",(0,t.yg)("inlineCode",{parentName:"p"},"IHeapSnapshot"),">"," | heap representation with heap analysis meta data.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Examples:")))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot} from '@memlab/core';\nimport type {takeNodeFullHeap} from '@memlab/heap-analysis';\n\n(async function () {\n  const heap: IHeapSnapshot = await takeNodeFullHeap();\n})();\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/f9749f2/packages/heap-analysis/src/PluginUtils.ts#L577"},"heap-analysis/src/PluginUtils.ts:577"))))))}g.isMDXComponent=!0},5680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>d});var s=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),n.push.apply(n,s)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach(function(a){t(e,a,n[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})}return e}function p(e,a){if(null==e)return{};var n,s,t=function(e,a){if(null==e)return{};var n,s,t={},l=Object.keys(e);for(s=0;s<l.length;s++)n=l[s],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)n=l[s],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var o=s.createContext({}),r=function(e){var a=s.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},m=function(e){var a=r(e.components);return s.createElement(o.Provider,{value:a},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},h=s.forwardRef(function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),y=r(n),h=t,d=y["".concat(o,".").concat(h)]||y[h]||g[h]||l;return n?s.createElement(d,i(i({ref:a},m),{},{components:n})):s.createElement(d,i({ref:a},m))});function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=h;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[y]="string"==typeof e?e:t,i[1]=p;for(var r=2;r<l;r++)i[r]=n[r];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);