"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[8982],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>h});var n=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=p(t),d=s,h=c["".concat(o,".").concat(d)]||c[d]||u[d]||l;return t?n.createElement(h,i(i({ref:a},m),{},{components:t})):n.createElement(h,i({ref:a},m))}));function h(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var l=t.length,i=new Array(l);i[0]=d;var r={};for(var o in a)hasOwnProperty.call(a,o)&&(r[o]=a[o]);r.originalType=e,r[c]="string"==typeof e?e:s,i[1]=r;for(var p=2;p<l;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7535:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var n=t(7462),s=(t(7294),t(3905));const l={id:"heap_analysis_src.BaseAnalysis",title:"Class: BaseAnalysis",sidebar_label:"BaseAnalysis",custom_edit_url:null},i=void 0,r={unversionedId:"api/classes/heap_analysis_src.BaseAnalysis",id:"api/classes/heap_analysis_src.BaseAnalysis",title:"Class: BaseAnalysis",description:"Hierarchy",source:"@site/docs/api/classes/heap_analysis_src.BaseAnalysis.md",sourceDirName:"api/classes",slug:"/api/classes/heap_analysis_src.BaseAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"heap_analysis_src.BaseAnalysis",title:"Class: BaseAnalysis",sidebar_label:"BaseAnalysis",custom_edit_url:null},sidebar:"sidebar",previous:{title:"SnapshotResultReader",permalink:"/memlab/docs/api/classes/api_src.SnapshotResultReader"},next:{title:"CollectionsHoldingStaleAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.CollectionsHoldingStaleAnalysis"}},o={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:'<a id="new baseanalysis"></a><strong>new BaseAnalysis</strong>()',id:"new-baseanalysis",level:3},{value:"Methods",id:"methods",level:2},{value:'<a id="analyzesnapshotfromfile"></a><strong>analyzeSnapshotFromFile</strong>(<code>file</code>, <code>options?</code>)',id:"analyzesnapshotfromfilefile-options",level:3},{value:'<a id="analyzesnapshotsindirectory"></a><strong>analyzeSnapshotsInDirectory</strong>(<code>directory</code>, <code>options?</code>)',id:"analyzesnapshotsindirectorydirectory-options",level:3},{value:'<a id="getcommandname"></a><strong>getCommandName</strong>()',id:"getcommandname",level:3},{value:'<a id="getdescription"></a><strong>getDescription</strong>()',id:"getdescription",level:3},{value:'<a id="getoptions"></a><strong>getOptions</strong>()',id:"getoptions",level:3},{value:'<a id="process"></a><strong>process</strong>(<code>options</code>)',id:"processoptions",level:3}],m={toc:p},c="wrapper";function u(e){let{components:a,...t}=e;return(0,s.kt)(c,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Analysis")),(0,s.kt)("p",{parentName:"li"},"\u21b3 ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"BaseAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.DetachedDOMElementAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"DetachedDOMElementAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.GlobalVariableAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"GlobalVariableAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.CollectionsHoldingStaleAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"CollectionsHoldingStaleAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectShallowAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ObjectShallowAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectSizeAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ObjectSizeAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ShapeUnboundGrowthAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ShapeUnboundGrowthAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectFanoutAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ObjectFanoutAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectShapeAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ObjectShapeAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.ObjectUnboundGrowthAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"ObjectUnboundGrowthAnalysis"))),(0,s.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,s.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.StringAnalysis"},(0,s.kt)("inlineCode",{parentName:"a"},"StringAnalysis"))))),(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("h3",{id:"new-baseanalysis"},(0,s.kt)("a",{id:"new baseanalysis"}),(0,s.kt)("strong",{parentName:"h3"},"new BaseAnalysis"),"()"),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"analyzesnapshotfromfilefile-options"},(0,s.kt)("a",{id:"analyzesnapshotfromfile"}),(0,s.kt)("strong",{parentName:"h3"},"analyzeSnapshotFromFile"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"file"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"options?"),")"),(0,s.kt)("p",null,"Run heap analysis for a single heap snapshot file"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"file"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"string")," | the absolute path of a ",(0,s.kt)("inlineCode",{parentName:"li"},".heapsnapshot")," file."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#runheapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"RunHeapAnalysisOptions"))," | optional configuration for the heap analysis run"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#analyzesnapshotresult"},(0,s.kt)("inlineCode",{parentName:"a"},"AnalyzeSnapshotResult")),">"," | this API returns ",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#analyzesnapshotresult"},"AnalyzeSnapshotResult"),", which contains\nthe logging file of analysis console output. Alternatively, to get more\nstructured analysis results, check out the documentation of the hosting\nheap analysis class and call the analysis-specific API to get results\nafter calling this method."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Example"),":")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new StringAnalysis();\n// analysis console output is saved in result.analysisOutputFile\nconst result = await analysis.analyzeSnapshotFromFile(snapshotFile);\n// query analysis-specific and structured results\nconst stringPatterns = analysis.getTopDuplicatedStringsInCount();\n")),(0,s.kt)("p",null,"Additionally, you can specify a working directory to where\nthe intermediate, logging, and final output files will be dumped:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new StringAnalysis();\n// analysis console output is saved in result.analysisOutputFile\n// which is inside the specified working directory\nconst result = await analysis.analyzeSnapshotFromFile(snapshotFile, {\n  // if the specified directory doesn't exist, memlab will create it\n  workDir: '/tmp/your/work/dir',\n});\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L95"},"heap-analysis/src/BaseAnalysis.ts:95"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"analyzesnapshotsindirectorydirectory-options"},(0,s.kt)("a",{id:"analyzesnapshotsindirectory"}),(0,s.kt)("strong",{parentName:"h3"},"analyzeSnapshotsInDirectory"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"directory"),", ",(0,s.kt)("inlineCode",{parentName:"h3"},"options?"),")"),(0,s.kt)("p",null,"Run heap analysis for a series of heap snapshot files"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"directory"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"string")," | the absolute path of the directory holding a series of ",(0,s.kt)("inlineCode",{parentName:"li"},".heapsnapshot")," files, all snapshot files will be loaded and analyzed in the alphanumerically ascending order of those snapshot file names."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#runheapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"RunHeapAnalysisOptions"))," | optional configuration for the heap analysis run"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#analyzesnapshotresult"},(0,s.kt)("inlineCode",{parentName:"a"},"AnalyzeSnapshotResult")),">"," | this API returns ",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#analyzesnapshotresult"},"AnalyzeSnapshotResult"),", which contains\nthe logging file of analysis console output. Alternatively, to get more\nstructured analysis results, check out the documentation of the hosting\nheap analysis class and call the analysis-specific API to get results\nafter calling this method."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Example"),":")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ShapeUnboundGrowthAnalysis();\n// analysis console output is saved in result.analysisOutputFile\nconst result = await analysis.analyzeSnapshotsInDirectory(snapshotDirectory);\n// query analysis-specific and structured results\nconst shapes = analysis.getShapesWithUnboundGrowth();\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Additionally, you can specify a working directory to where\nthe intermediate, logging, and final output files will be dumped:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new ShapeUnboundGrowthAnalysis();\n// analysis console output is saved in result.analysisOutputFile\n// which is inside the specified working directory\nconst result = await analysis.analyzeSnapshotsInDirectory(snapshotDirectory, {\n  // if the specified directory doesn't exist, memlab will create it\n  workDir: '/tmp/your/work/dir',\n});\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L148"},"heap-analysis/src/BaseAnalysis.ts:148"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getcommandname"},(0,s.kt)("a",{id:"getcommandname"}),(0,s.kt)("strong",{parentName:"h3"},"getCommandName"),"()"),(0,s.kt)("p",null,"Get the name of the heap analysis, which is also used to reference\nthe analysis in memlab command-line tool."),(0,s.kt)("p",null,"The following terminal command will initiate with this analysis:\n",(0,s.kt)("inlineCode",{parentName:"p"},"memlab analyze <ANALYSIS_NAME>")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"string")," | the name of the analysis"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Examples"),":")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new YourAnalysis();\nconst name = analysis.getCommandName();\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L189"},"heap-analysis/src/BaseAnalysis.ts:189"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getdescription"},(0,s.kt)("a",{id:"getdescription"}),(0,s.kt)("strong",{parentName:"h3"},"getDescription"),"()"),(0,s.kt)("p",null,"Get the textual description of the heap analysis.\nThe description of this analysis will be printed by:\n",(0,s.kt)("inlineCode",{parentName:"p"},"memlab analyze list")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," | the description")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Source"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L201"},"heap-analysis/src/BaseAnalysis.ts:201"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getoptions"},(0,s.kt)("a",{id:"getoptions"}),(0,s.kt)("strong",{parentName:"h3"},"getOptions"),"()"),(0,s.kt)("p",null,"override this method if you would like CLI to print the option info"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"default"),"[] | an array of command line options")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Source"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L228"},"heap-analysis/src/BaseAnalysis.ts:228"))))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"processoptions"},(0,s.kt)("a",{id:"process"}),(0,s.kt)("strong",{parentName:"h3"},"process"),"(",(0,s.kt)("inlineCode",{parentName:"h3"},"options"),")"),(0,s.kt)("p",null,"Callback for ",(0,s.kt)("inlineCode",{parentName:"p"},"memlab analyze <command-name>"),".\nDo the memory analysis and print results in this callback\nThe analysis should support:\n1) printing results on screen\n2) returning results via the return value"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Parameters"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,s.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/heap_analysis_src#heapanalysisoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"HeapAnalysisOptions"))," | This is the auto-generated arguments passed to all the ",(0,s.kt)("inlineCode",{parentName:"li"},"process")," method that your self-defined heap analysis should implement. You are not supposed to construct instances of this class."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Returns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,s.kt)("inlineCode",{parentName:"li"},"any"),">"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Source"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/e2865bf/packages/heap-analysis/src/BaseAnalysis.ts#L216"},"heap-analysis/src/BaseAnalysis.ts:216"))))))}u.isMDXComponent=!0}}]);