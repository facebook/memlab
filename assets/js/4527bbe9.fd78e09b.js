"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[7573],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>y});var l=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,l,n=function(e,a){if(null==e)return{};var t,l,n={},s=Object.keys(e);for(l=0;l<s.length;l++)t=s[l],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)t=s[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=l.createContext({}),p=function(e){var a=l.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=p(e.components);return l.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},u=l.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),y=n,b=u["".concat(o,".").concat(y)]||u[y]||m[y]||s;return t?l.createElement(b,r(r({ref:a},c),{},{components:t})):l.createElement(b,r({ref:a},c))}));function y(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,r=new Array(s);r[0]=u;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,r[1]=i;for(var p=2;p<s;p++)r[p]=t[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7817:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var l=t(7462),n=(t(7294),t(3905));const s={id:"heap_analysis_src.GlobalVariableAnalysis",title:"Class: GlobalVariableAnalysis",sidebar_label:"GlobalVariableAnalysis",custom_edit_url:null},r=void 0,i={unversionedId:"api/classes/heap_analysis_src.GlobalVariableAnalysis",id:"api/classes/heap_analysis_src.GlobalVariableAnalysis",title:"Class: GlobalVariableAnalysis",description:"Hierarchy",source:"@site/docs/api/classes/heap_analysis_src.GlobalVariableAnalysis.md",sourceDirName:"api/classes",slug:"/api/classes/heap_analysis_src.GlobalVariableAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.GlobalVariableAnalysis",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"heap_analysis_src.GlobalVariableAnalysis",title:"Class: GlobalVariableAnalysis",sidebar_label:"GlobalVariableAnalysis",custom_edit_url:null},sidebar:"sidebar",previous:{title:"DetachedDOMElementAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.DetachedDOMElementAnalysis"},next:{title:"ObjectFanoutAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.ObjectFanoutAnalysis"}},o={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:'<a id="new globalvariableanalysis"></a><strong>new GlobalVariableAnalysis</strong>()',id:"new-globalvariableanalysis",level:3},{value:"Methods",id:"methods",level:2},{value:'<a id="analyzesnapshotfromfile"></a><strong>analyzeSnapshotFromFile</strong>(<code>file</code>)',id:"analyzesnapshotfromfilefile",level:3},{value:'<a id="getcommandname"></a><strong>getCommandName</strong>()',id:"getcommandname",level:3}],c={toc:p};function m(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,l.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis"},(0,n.kt)("inlineCode",{parentName:"a"},"BaseAnalysis"))),(0,n.kt)("p",{parentName:"li"},"\u21b3 ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"GlobalVariableAnalysis"))))),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"new-globalvariableanalysis"},(0,n.kt)("a",{id:"new globalvariableanalysis"}),(0,n.kt)("strong",{parentName:"h3"},"new GlobalVariableAnalysis"),"()"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"analyzesnapshotfromfilefile"},(0,n.kt)("a",{id:"analyzesnapshotfromfile"}),(0,n.kt)("strong",{parentName:"h3"},"analyzeSnapshotFromFile"),"(",(0,n.kt)("inlineCode",{parentName:"h3"},"file"),")"),(0,n.kt)("p",null,"Run heap analysis for a single heap snapshot file"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Parameters"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"file"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"string")," | the absolute path of a ",(0,n.kt)("inlineCode",{parentName:"li"},".heapsnapshot")," file."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,n.kt)("inlineCode",{parentName:"li"},"void"),">"," | this API returns void. To get the analysis results,\ncheck out the documentation of the hosting heap analysis class and\ncall the analysis-specific API to get results after calling this method."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Example"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new StringAnalysis();\nawait anaysis.analyzeSnapshotFromFile(snapshotFile);\nconst stringPatterns = analysis.getTopDuplicatedStringsInCount();\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Source"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/9262b35/packages/heap-analysis/src/BaseAnalysis.ts#L75"},"heap-analysis/src/BaseAnalysis.ts:75"))))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getcommandname"},(0,n.kt)("a",{id:"getcommandname"}),(0,n.kt)("strong",{parentName:"h3"},"getCommandName"),"()"),(0,n.kt)("p",null,"Get the name of the heap analysis, which is also used to reference\nthe analysis in memlab command-line tool."),(0,n.kt)("p",null,"The following terminal command will initiate with this analysis:\n",(0,n.kt)("inlineCode",{parentName:"p"},"memlab analyze <ANALYSIS_NAME>")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"string")," | the name of the analysis"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Examples"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const analysis = new YourAnalysis();\nconst name = analysis.getCommandName();\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Source"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/9262b35/packages/heap-analysis/src/plugins/GlobalVariableAnalysis/GlobalVariableAnalysis.ts#L21"},"heap-analysis/src/plugins/GlobalVariableAnalysis/GlobalVariableAnalysis.ts:21"))))))}m.isMDXComponent=!0}}]);