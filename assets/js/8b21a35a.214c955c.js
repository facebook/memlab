"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[9666],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),k=r,d=c["".concat(o,".").concat(k)]||c[k]||u[k]||i;return a?n.createElement(d,l(l({ref:t},m),{},{components:a})):n.createElement(d,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4295:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={id:"api_src",title:"Package: @memlab/api",sidebar_label:"api/src",sidebar_position:0,custom_edit_url:null},l=void 0,s={unversionedId:"api/modules/api_src",id:"api/modules/api_src",title:"Package: @memlab/api",description:"Classes",source:"@site/docs/api/modules/api_src.md",sourceDirName:"api/modules",slug:"/api/modules/api_src",permalink:"/memlab/docs/api/modules/api_src",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"api_src",title:"Package: @memlab/api",sidebar_label:"api/src",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"Table of contents",permalink:"/memlab/docs/api/"},next:{title:"core/src",permalink:"/memlab/docs/api/modules/core_src"}},o={},p=[{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:'<a id="runoptions" name="runoptions"></a> <strong>RunOptions</strong>: <code>Object</code>',id:"-runoptions-object",level:3},{value:'<a id="runresult" name="runresult"></a> <strong>RunResult</strong>: <code>Object</code>',id:"-runresult-object",level:3},{value:"Functions",id:"functions",level:2},{value:'<a id="analyze"></a><strong>analyze</strong>(<code>runResult</code>, <code>heapAnalyzer</code>, <code>args?</code>)',id:"analyzerunresult-heapanalyzer-args",level:3},{value:'<a id="findleaks"></a><strong>findLeaks</strong>(<code>runResult</code>)',id:"findleaksrunresult",level:3},{value:'<a id="run"></a><strong>run</strong>(<code>runOptions?</code>)',id:"runrunoptions",level:3},{value:'<a id="takesnapshots"></a><strong>takeSnapshots</strong>(<code>options?</code>)',id:"takesnapshotsoptions",level:3},{value:'<a id="warmupandtakesnapshots"></a><strong>warmupAndTakeSnapshots</strong>(<code>options?</code>)',id:"warmupandtakesnapshotsoptions",level:3}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader"))),(0,r.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("h3",{id:"-runoptions-object"},(0,r.kt)("a",{id:"runoptions",name:"runoptions"})," ",(0,r.kt)("strong",{parentName:"h3"},"RunOptions"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"Object")),(0,r.kt)("p",null,"Options for configuring browser interaction run, all fields are optional"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"cookiesFile?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the absolute path of cookies file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"evalInBrowserAfterInitLoad?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AnyFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"function to be evaluated in browser context after the web page initial load")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"scenario?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IScenario")),(0,r.kt)("td",{parentName:"tr",align:"left"},"test scenario specifying how to interact with browser (for more details view ",(0,r.kt)("a",{parentName:"td",href:"/memlab/docs/api/interfaces/core_src.IScenario"},"IScenario"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"snapshotForEachStep?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"if true, take heap snapshot for each interaction step, by default this is false, which means memlab will decide which steps it will take heap snapshots")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"workDir?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"specify the working directory where you want memlab to dump heap snapshots and other meta data of the test run. If no working directory is provided, memlab will generate a random temp directory under the operating system's default directory for temporary files. Note: It's the caller's responsibility to make sure the specified working directory exists.")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L43"},"api/src/API.ts:43"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-runresult-object"},(0,r.kt)("a",{id:"runresult",name:"runresult"})," ",(0,r.kt)("strong",{parentName:"h3"},"RunResult"),": ",(0,r.kt)("inlineCode",{parentName:"h3"},"Object")),(0,r.kt)("p",null,"A data structure holding the result of the ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#run"},"run")," API call."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"leaks")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ISerializedInfo"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"leak traces detected and clustered from the browser interaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"runResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"a utility for reading browser interaction results from disk")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L77"},"api/src/API.ts:77"))))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"analyzerunresult-heapanalyzer-args"},(0,r.kt)("a",{id:"analyze"}),(0,r.kt)("strong",{parentName:"h3"},"analyze"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"runResult"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"heapAnalyzer"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"args?"),")"),(0,r.kt)("p",null,"This API analyzes heap snapshot(s) with a specified heap analysis.\nThis is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab analyze")," in CLI."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"runResult"),": ",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader"))," | return value of a browser interaction run"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"heapAnalyzer"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseAnalysis")," | instance of a heap analysis"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ParsedArgs")," | other CLI arguments that needs to be passed to the heap analysis"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"li"},"void"),">"," | each analysis may have a different return type, please check out\nthe type definition or the documentation for the ",(0,r.kt)("inlineCode",{parentName:"li"},"process")," method of the\nanalysis class you are using for ",(0,r.kt)("inlineCode",{parentName:"li"},"heapAnalyzer"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {takeSnapshots, StringAnalysis} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario});\n  const analysis = new StringAnalysis();\n  await analyze(result, analysis);\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L249"},"api/src/API.ts:249"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findleaksrunresult"},(0,r.kt)("a",{id:"findleaks"}),(0,r.kt)("strong",{parentName:"h3"},"findLeaks"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"runResult"),")"),(0,r.kt)("p",null,"This API finds memory leaks by analyzing heap snapshot(s)\nThis is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab find-leaks")," in CLI."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"runResult"),": ",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader"))," | return value of a browser interaction run"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"li"},"ISerializedInfo"),"[]",">"," | leak traces detected and clustered from the browser interaction"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {findLeaks, takeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario});\n  const leaks = findLeaks(result);\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L216"},"api/src/API.ts:216"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"runrunoptions"},(0,r.kt)("a",{id:"run"}),(0,r.kt)("strong",{parentName:"h3"},"run"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"runOptions?"),")"),(0,r.kt)("p",null,"This API runs browser interaction and find memory leaks triggered in browser\nThis is equivalent to run ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab run")," in CLI.\nThis is also equivalent to warm up, and call ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#takesnapshots"},"takeSnapshots"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#findleaks"},"findLeaks"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"runOptions"),": ",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"RunOptions"))," | configure browser interaction run"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runresult"},(0,r.kt)("inlineCode",{parentName:"a"},"RunResult")),">"," | memory leaks detected and a utility reading browser\ninteraction results from disk"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {run} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const {leaks} = await run({scenario});\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L154"},"api/src/API.ts:154"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"takesnapshotsoptions"},(0,r.kt)("a",{id:"takesnapshots"}),(0,r.kt)("strong",{parentName:"h3"},"takeSnapshots"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.kt)("p",null,"This API runs E2E interaction and takes heap snapshots.\nThis is equivalent to run ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab snapshot")," in CLI."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"RunOptions"))," | configure browser interaction run"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader")),">"," | a utility reading browser interaction results from disk"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {takeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario});\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L185"},"api/src/API.ts:185"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"warmupandtakesnapshotsoptions"},(0,r.kt)("a",{id:"warmupandtakesnapshots"}),(0,r.kt)("strong",{parentName:"h3"},"warmupAndTakeSnapshots"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.kt)("p",null,"This API warms up web server, runs E2E interaction, and takes heap snapshots.\nThis is equivalent to run ",(0,r.kt)("inlineCode",{parentName:"p"},"memlab warmup-and-snapshot")," in CLI.\nThis is also equivalent to warm up and call ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#takesnapshots"},"takeSnapshots"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": ",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"RunOptions"))," | configure browser interaction run"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.kt)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader")),">"," | browser interaction results"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {warmupAndTakeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await warmupAndTakeSnapshots({scenario});\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/memlab/blob/699cb36/packages/api/src/API.ts#L120"},"api/src/API.ts:120"))))))}u.isMDXComponent=!0}}]);