"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[6640],{5680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>u});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},m=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},y=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),g=p(n),y=r,u=g["".concat(s,".").concat(y)]||g[y]||d[y]||i;return n?t.createElement(u,l(l({ref:a},m),{},{components:n})):t.createElement(u,l({ref:a},m))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=y;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[g]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1416:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=n(8168),r=(n(6540),n(5680));const i={id:"api_src",title:"Package: @memlab/api",sidebar_label:"api/src",sidebar_position:0,custom_edit_url:null},l=void 0,o={unversionedId:"api/modules/api_src",id:"api/modules/api_src",title:"Package: @memlab/api",description:"Enumerations",source:"@site/docs/api/modules/api_src.md",sourceDirName:"api/modules",slug:"/api/modules/api_src",permalink:"/memlab/docs/api/modules/api_src",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"api_src",title:"Package: @memlab/api",sidebar_label:"api/src",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"Table of contents",permalink:"/memlab/docs/api/"},next:{title:"core/src",permalink:"/memlab/docs/api/modules/core_src"}},s={},p=[{value:"Enumerations",id:"enumerations",level:2},{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:'<a id="runoptions" name="runoptions"></a> <strong>RunOptions</strong>: <code>Object</code>',id:"-runoptions-object",level:3},{value:'<a id="runresult" name="runresult"></a> <strong>RunResult</strong>: <code>Object</code>',id:"-runresult-object",level:3},{value:"Functions",id:"functions",level:2},{value:'<a id="analyze"></a><strong>analyze</strong>(<code>runResult</code>, <code>heapAnalyzer</code>, <code>args?</code>)',id:"analyzerunresult-heapanalyzer-args",level:3},{value:'<a id="findleaks"></a><strong>findLeaks</strong>(<code>runResult</code>, <code>options?</code>)',id:"findleaksrunresult-options",level:3},{value:'<a id="findleaksbysnapshotfilepaths"></a><strong>findLeaksBySnapshotFilePaths</strong>(<code>baselineSnapshot</code>, <code>targetSnapshot</code>, <code>finalSnapshot</code>, <code>options?</code>)',id:"findleaksbysnapshotfilepathsbaselinesnapshot-targetsnapshot-finalsnapshot-options",level:3},{value:'<a id="run"></a><strong>run</strong>(<code>options?</code>)',id:"runoptions",level:3},{value:'<a id="takesnapshots"></a><strong>takeSnapshots</strong>(<code>options?</code>)',id:"takesnapshotsoptions",level:3},{value:'<a id="warmupandtakesnapshots"></a><strong>warmupAndTakeSnapshots</strong>(<code>options?</code>)',id:"warmupandtakesnapshotsoptions",level:3}],m={toc:p},g="wrapper";function d(e){let{components:a,...n}=e;return(0,r.yg)(g,(0,t.A)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"enumerations"},"Enumerations"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},"ConsoleMode"))),(0,r.yg)("h2",{id:"classes"},"Classes"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},"BrowserInteractionResultReader")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.SnapshotResultReader"},"SnapshotResultReader"))),(0,r.yg)("h2",{id:"type-aliases"},"Type Aliases"),(0,r.yg)("h3",{id:"-runoptions-object"},(0,r.yg)("a",{id:"runoptions",name:"runoptions"})," ",(0,r.yg)("strong",{parentName:"h3"},"RunOptions"),": ",(0,r.yg)("inlineCode",{parentName:"h3"},"Object")),(0,r.yg)("p",null,"Options for configuring browser interaction run, all fields are optional"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"chromiumBinary?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"if not specified, memlab will use the Chromium binary installed by Puppeteer. Use this option to specify a different binary if Puppeteer does not install the Chromium binary correctly (e.g., in a environtment Docker) or when you may want to use a different version of Chromium binary.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"consoleMode?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},(0,r.yg)("inlineCode",{parentName:"a"},"ConsoleMode"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"specifying the terminal output mode, default is ",(0,r.yg)("inlineCode",{parentName:"td"},"default"),". For more details. please check out ",(0,r.yg)("a",{parentName:"td",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},"ConsoleMode"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"cookiesFile?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"the absolute path of cookies file")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"evalInBrowserAfterInitLoad?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"AnyFunction")),(0,r.yg)("td",{parentName:"tr",align:"left"},"function to be evaluated in browser context after the web page initial load. Note that this function is defined in node.js context but it will be evaluated in browser context so the function should not use any closure variables outside of the browser context.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"scenario?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"IScenario")),(0,r.yg)("td",{parentName:"tr",align:"left"},"test scenario specifying how to interact with browser (for more details view ",(0,r.yg)("a",{parentName:"td",href:"/memlab/docs/api/interfaces/core_src.IScenario"},"IScenario"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"skipWarmup?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"left"},"skip the initial page loading warmup for the web application being tested")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"snapshotForEachStep?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"left"},"if true, take heap snapshot for each interaction step, by default this is false, which means memlab will decide which steps it will take heap snapshots")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"webWorker?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Optional"),"<",(0,r.yg)("inlineCode",{parentName:"td"},"string"),">"),(0,r.yg)("td",{parentName:"tr",align:"left"},"if this field is provided, it specifies the web worker as the target for heap analysis. For example ",(0,r.yg)("inlineCode",{parentName:"td"},"{webWorker: null}")," means analyzing the heap of the first web worker found. ",(0,r.yg)("inlineCode",{parentName:"td"},"{webWorker: 'workerTitle'}")," means analyzing the heap of the web worker with name: ",(0,r.yg)("inlineCode",{parentName:"td"},"'workerTitle'"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"workDir?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"specify the working directory where you want memlab to dump heap snapshots and other meta data of the test run. If no working directory is provided, memlab will generate a random temp directory under the operating system's default directory for temporary files. Note: It's the caller's responsibility to make sure the specified working directory exists.")))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L47"},"api/src/API.ts:47"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"-runresult-object"},(0,r.yg)("a",{id:"runresult",name:"runresult"})," ",(0,r.yg)("strong",{parentName:"h3"},"RunResult"),": ",(0,r.yg)("inlineCode",{parentName:"h3"},"Object")),(0,r.yg)("p",null,"A data structure holding the result of the ",(0,r.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#run"},"run")," API call."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"leaks")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"ISerializedInfo"),"[]"),(0,r.yg)("td",{parentName:"tr",align:"left"},"leak traces detected and clustered from the browser interaction")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"runResult")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.yg)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"a utility for reading browser interaction results from disk")))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L108"},"api/src/API.ts:108"))))),(0,r.yg)("h2",{id:"functions"},"Functions"),(0,r.yg)("h3",{id:"analyzerunresult-heapanalyzer-args"},(0,r.yg)("a",{id:"analyze"}),(0,r.yg)("strong",{parentName:"h3"},"analyze"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"runResult"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"heapAnalyzer"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"args?"),")"),(0,r.yg)("p",null,"This API analyzes heap snapshot(s) with a specified heap analysis.\nThis is equivalent to ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab analyze")," in CLI."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"runResult"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"default")," | return value of a browser interaction run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"heapAnalyzer"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"BaseAnalysis")," | instance of a heap analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"args"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"ParsedArgs")," | other CLI arguments that needs to be passed to the heap analysis"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.yg)("inlineCode",{parentName:"li"},"void"),">"," | each analysis may have a different return type, please check out\nthe type definition or the documentation for the ",(0,r.yg)("inlineCode",{parentName:"li"},"process")," method of the\nanalysis class you are using for ",(0,r.yg)("inlineCode",{parentName:"li"},"heapAnalyzer"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Examples"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const {analyze, takeSnapshots, StringAnalysis} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario});\n  const analysis = new StringAnalysis();\n  await analyze(result, analysis);\n})();\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L328"},"api/src/API.ts:328"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"findleaksrunresult-options"},(0,r.yg)("a",{id:"findleaks"}),(0,r.yg)("strong",{parentName:"h3"},"findLeaks"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"runResult"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.yg)("p",null,"This API finds memory leaks by analyzing heap snapshot(s).\nThis is equivalent to ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab find-leaks")," in CLI."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"runResult"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"default")," | return value of a browser interaction run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Object")," | configure memory leak detection run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options.consoleMode?"),": ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},(0,r.yg)("inlineCode",{parentName:"a"},"ConsoleMode"))," | specify the terminal output mode (see ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},"ConsoleMode"),")"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.yg)("inlineCode",{parentName:"li"},"ISerializedInfo"),"[]",">"," | leak traces detected and clustered from the browser interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Examples"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const {findLeaks, takeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario, consoleMode: 'SILENT'});\n  const leaks = findLeaks(result, {consoleMode: 'CONTINUOUS_TEST'});\n})();\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L256"},"api/src/API.ts:256"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"findleaksbysnapshotfilepathsbaselinesnapshot-targetsnapshot-finalsnapshot-options"},(0,r.yg)("a",{id:"findleaksbysnapshotfilepaths"}),(0,r.yg)("strong",{parentName:"h3"},"findLeaksBySnapshotFilePaths"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"baselineSnapshot"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"targetSnapshot"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"finalSnapshot"),", ",(0,r.yg)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.yg)("p",null,"This API finds memory leaks by analyzing specified heap snapshots.\nThis is equivalent to ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab find-leaks")," with\nthe ",(0,r.yg)("inlineCode",{parentName:"p"},"--baseline"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"--target"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"--final")," flags in CLI."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"baselineSnapshot"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"string")," | the file path of the baseline heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"targetSnapshot"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"string")," | the file path of the target heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"finalSnapshot"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"string")," | the file path of the final heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Object")," | optionally, you can specify a mode for heap analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options.consoleMode?"),": ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},(0,r.yg)("inlineCode",{parentName:"a"},"ConsoleMode"))," | specify the terminal output mode (see ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/enums/api_src.ConsoleMode"},"ConsoleMode"),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options.workDir?"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"string")," | specify a working directory (other than the default one)"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.yg)("inlineCode",{parentName:"p"},"ISerializedInfo"),"[]",">"," | leak traces detected and clustered from the browser interaction")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Source"),":"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L284"},"api/src/API.ts:284"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"runoptions"},(0,r.yg)("a",{id:"run"}),(0,r.yg)("strong",{parentName:"h3"},"run"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.yg)("p",null,"This API runs browser interaction and find memory leaks triggered in browser\nThis is equivalent to running ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab run")," in CLI.\nThis is also equivalent to warm up, and call ",(0,r.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#takesnapshots"},"takeSnapshots"),"\nand ",(0,r.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#findleaks"},"findLeaks"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.yg)("inlineCode",{parentName:"a"},"RunOptions"))))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runresult"},(0,r.yg)("inlineCode",{parentName:"a"},"RunResult")),">"," | memory leaks detected and a utility reading browser\ninteraction results from disk"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Examples"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const {run} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const {leaks} = await run({scenario});\n})();\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L188"},"api/src/API.ts:188"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"takesnapshotsoptions"},(0,r.yg)("a",{id:"takesnapshots"}),(0,r.yg)("strong",{parentName:"h3"},"takeSnapshots"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.yg)("p",null,"This API runs E2E interaction and takes heap snapshots.\nThis is equivalent to running ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab snapshot")," in CLI."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.yg)("inlineCode",{parentName:"a"},"RunOptions"))," | configure browser interaction run"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.yg)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader")),">"," | a utility reading browser interaction results from disk"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Examples"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const {takeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await takeSnapshots({scenario});\n})();\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L221"},"api/src/API.ts:221"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"warmupandtakesnapshotsoptions"},(0,r.yg)("a",{id:"warmupandtakesnapshots"}),(0,r.yg)("strong",{parentName:"h3"},"warmupAndTakeSnapshots"),"(",(0,r.yg)("inlineCode",{parentName:"h3"},"options?"),")"),(0,r.yg)("p",null,"This API warms up web server, runs E2E interaction, and takes heap snapshots.\nThis is equivalent to running ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab warmup-and-snapshot")," in CLI.\nThis is also equivalent to warm up and call ",(0,r.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/api_src#takesnapshots"},"takeSnapshots"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Parameters"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"options"),": ",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/modules/api_src#runoptions"},(0,r.yg)("inlineCode",{parentName:"a"},"RunOptions"))," | configure browser interaction run"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Returns"),": ",(0,r.yg)("inlineCode",{parentName:"li"},"Promise"),"<",(0,r.yg)("a",{parentName:"li",href:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},(0,r.yg)("inlineCode",{parentName:"a"},"BrowserInteractionResultReader")),">"," | browser interaction results"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Examples"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const {warmupAndTakeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = {\n    url: () => 'https://www.facebook.com',\n  };\n  const result = await warmupAndTakeSnapshots({scenario});\n})();\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Source"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/d2ce836/packages/api/src/API.ts#L151"},"api/src/API.ts:151"))))))}d.isMDXComponent=!0}}]);