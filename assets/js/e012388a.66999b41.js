"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[8953],{3938:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(8168),t=(n(6540),n(5680));const o={id:"core_src.IHeapNodes",title:"Interface: IHeapNodes",sidebar_label:"IHeapNodes",custom_edit_url:null},l=void 0,i={unversionedId:"api/interfaces/core_src.IHeapNodes",id:"api/interfaces/core_src.IHeapNodes",title:"Interface: IHeapNodes",description:"A pseudo array containing all heap graph nodes (JS objects",source:"@site/docs/api/interfaces/core_src.IHeapNodes.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/core_src.IHeapNodes",permalink:"/memlab/docs/api/interfaces/core_src.IHeapNodes",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"core_src.IHeapNodes",title:"Interface: IHeapNodes",sidebar_label:"IHeapNodes",custom_edit_url:null},sidebar:"sidebar",previous:{title:"IHeapNode",permalink:"/memlab/docs/api/interfaces/core_src.IHeapNode"},next:{title:"IHeapSnapshot",permalink:"/memlab/docs/api/interfaces/core_src.IHeapSnapshot"}},p={},s=[{value:"Properties",id:"properties",level:2},{value:'<a id="length" name="length"></a> <strong>length</strong>: <code>number</code>',id:"-length-number",level:3},{value:"Methods",id:"methods",level:2},{value:'<a id="foreach"></a><strong>forEach</strong>(<code>callback</code>)',id:"foreachcallback",level:3},{value:'<a id="get"></a><strong>get</strong>(<code>index</code>)',id:"getindex",level:3}],c={toc:s},m="wrapper";function d(e){let{components:a,...n}=e;return(0,t.yg)(m,(0,r.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"A pseudo array containing all heap graph nodes (JS objects\nin heap). A JS heap could contain millions of objects, so memlab uses\na pseudo array as the collection of all the heap nodes. The pseudo\narray provides API to query and traverse all heap objects."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("inlineCode",{parentName:"strong"},"readonly"))," modifying this pseudo array is not recommended"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Examples"),":")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"import type {IHeapSnapshot, IHeapNodes} from '@memlab/core';\nimport {dumpNodeHeapSnapshot} from '@memlab/core';\nimport {getFullHeapFromFile} from '@memlab/heap-analysis';\n\n(async function () {\n  const heapFile = dumpNodeHeapSnapshot();\n  const heap: IHeapSnapshot = await getFullHeapFromFile(heapFile);\n\n  const nodes: IHeapNodes = heap.nodes;\n  nodes.length;\n  nodes.get(0);\n  nodes.forEach((node, i) => {\n    if (stopIteration) {\n      return false;\n    }\n  });\n})();\n")),(0,t.yg)("h2",{id:"properties"},"Properties"),(0,t.yg)("h3",{id:"-length-number"},(0,t.yg)("a",{id:"length",name:"length"})," ",(0,t.yg)("strong",{parentName:"h3"},"length"),": ",(0,t.yg)("inlineCode",{parentName:"h3"},"number")),(0,t.yg)("p",null,"The total number of nodes in heap graph (or JS objects in heap\nsnapshot)."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/85b0307/packages/core/src/lib/Types.ts#L2263"},"core/src/lib/Types.ts:2263"))))),(0,t.yg)("h2",{id:"methods"},"Methods"),(0,t.yg)("h3",{id:"foreachcallback"},(0,t.yg)("a",{id:"foreach"}),(0,t.yg)("strong",{parentName:"h3"},"forEach"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"callback"),")"),(0,t.yg)("p",null,"Iterate over all array elements and apply the callback\nto each element in ascending order of element index."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parameters"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"callback"),": (",(0,t.yg)("inlineCode",{parentName:"li"},"node"),": ",(0,t.yg)("a",{parentName:"li",href:"/memlab/docs/api/interfaces/core_src.IHeapNode"},(0,t.yg)("inlineCode",{parentName:"a"},"IHeapNode")),", ",(0,t.yg)("inlineCode",{parentName:"li"},"index"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"number"),") => ",(0,t.yg)("inlineCode",{parentName:"li"},"boolean")," ","|"," ",(0,t.yg)("inlineCode",{parentName:"li"},"void")," | the callback does not need to return any value, if the callback returns ",(0,t.yg)("inlineCode",{parentName:"li"},"false")," when iterating on element at index ",(0,t.yg)("inlineCode",{parentName:"li"},"i"),", then all elements after ",(0,t.yg)("inlineCode",{parentName:"li"},"i")," won't be iterated."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Returns"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"void")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Source"),":",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/85b0307/packages/core/src/lib/Types.ts#L2279"},"core/src/lib/Types.ts:2279"))))),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"getindex"},(0,t.yg)("a",{id:"get"}),(0,t.yg)("strong",{parentName:"h3"},"get"),"(",(0,t.yg)("inlineCode",{parentName:"h3"},"index"),")"),(0,t.yg)("p",null,"get an ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/interfaces/core_src.IHeapNode"},"IHeapNode")," element at the specified index"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"index"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"number")," | the index of an element in the pseudo array, the index ranges from 0 to array length - 1. Notice that this is not the heap node id."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Returns"),": ",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/modules/core_src#nullable"},(0,t.yg)("inlineCode",{parentName:"a"},"Nullable")),"<",(0,t.yg)("a",{parentName:"p",href:"/memlab/docs/api/interfaces/core_src.IHeapNode"},(0,t.yg)("inlineCode",{parentName:"a"},"IHeapNode")),">"," | When 0 <= ",(0,t.yg)("inlineCode",{parentName:"p"},"index")," < array.length, this API returns the element\nat the specified index, otherwise it returns ",(0,t.yg)("inlineCode",{parentName:"p"},"null"),".")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Source"),":"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/85b0307/packages/core/src/lib/Types.ts#L2271"},"core/src/lib/Types.ts:2271"))))))}d.isMDXComponent=!0},5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>y});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var p=r.createContext({}),s=function(e){var a=r.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=s(e.components);return r.createElement(p.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),g=t,y=m["".concat(p,".").concat(g)]||m[g]||d[g]||o;return n?r.createElement(y,l(l({ref:a},c),{},{components:n})):r.createElement(y,l({ref:a},c))}));function y(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[m]="string"==typeof e?e:t,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);