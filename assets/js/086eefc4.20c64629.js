"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[2055],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||s;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2986:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={id:"api_src.SnapshotResultReader",title:"Class: SnapshotResultReader",sidebar_label:"SnapshotResultReader",custom_edit_url:null},l=void 0,i={unversionedId:"api/classes/api_src.SnapshotResultReader",id:"api/classes/api_src.SnapshotResultReader",title:"Class: SnapshotResultReader",description:"A utility entity to read all MemLab files generated from",source:"@site/docs/api/classes/api_src.SnapshotResultReader.md",sourceDirName:"api/classes",slug:"/api/classes/api_src.SnapshotResultReader",permalink:"/memlab/docs/api/classes/api_src.SnapshotResultReader",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"api_src.SnapshotResultReader",title:"Class: SnapshotResultReader",sidebar_label:"SnapshotResultReader",custom_edit_url:null},sidebar:"sidebar",previous:{title:"BrowserInteractionResultReader",permalink:"/memlab/docs/api/classes/api_src.BrowserInteractionResultReader"},next:{title:"BaseAnalysis",permalink:"/memlab/docs/api/classes/heap_analysis_src.BaseAnalysis"}},o={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Methods",id:"methods",level:2},{value:'<a id="getinteractionsteps"></a><strong>getInteractionSteps</strong>()',id:"getinteractionsteps",level:3},{value:'<a id="getrootdirectory"></a><strong>getRootDirectory</strong>()',id:"getrootdirectory",level:3},{value:'<a id="getsnapshotfiles"></a><strong>getSnapshotFiles</strong>()',id:"getsnapshotfiles",level:3},{value:'<a id="fromsnapshots"></a><code>Static</code> <strong>fromSnapshots</strong>(<code>baselineSnapshot</code>, <code>targetSnapshot</code>, <code>finalSnapshot</code>)',id:"static-fromsnapshotsbaselinesnapshot-targetsnapshot-finalsnapshot",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A utility entity to read all MemLab files generated from\nbaseline, target and final heap snapshots."),(0,r.kt)("p",null,"The most useful feature of this class is when you have\nthree separate snapshots (baseline, target, and final)\nthat are not taken from MemLab, but you still would\nlike to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"findLeaks")," to detect memory leaks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {SnapshotResultReader, findLeaks} = require('@memlab/api');\n\n// baseline, target, and final are file paths of heap snapshot files\nconst reader = SnapshotResultReader.fromSnapshots(baseline, target, final);\nconst leaks = await findLeaks(reader);\n")),(0,r.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"default")),(0,r.kt)("p",{parentName:"li"},"\u21b3 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"SnapshotResultReader"))))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"getinteractionsteps"},(0,r.kt)("a",{id:"getinteractionsteps"}),(0,r.kt)("strong",{parentName:"h3"},"getInteractionSteps"),"()"),(0,r.kt)("p",null,"browser interaction step sequence"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"E2EStepInfo"),"[] | an array of browser interaction step information")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {SnapshotResultReader} = require('@memlab/api');\n\n// baseline, target, and final are file paths of heap snapshot files\nconst reader = SnapshotResultReader.fromSnapshots(baseline, target, final);\nconst paths = reader.getInteractionSteps();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/18b23d5/packages/api/src/result-reader/SnapshotResultReader.ts#L159"},"api/src/result-reader/SnapshotResultReader.ts:159"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrootdirectory"},(0,r.kt)("a",{id:"getrootdirectory"}),(0,r.kt)("strong",{parentName:"h3"},"getRootDirectory"),"()"),(0,r.kt)("p",null,"get the directory where the data and generated files of\nthe memlab run were stored"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | absolute path of the directory"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {takeSnapshots} = require('@memlab/api');\n\n(async function () {\n  const scenario = { url: () => 'https://www.npmjs.com'};\n  const result = await takeSnapshots({scenario});\n\n  // get the directory that stores all the files\n  // generated from the takeSnapshots call\n  const dataDir = result.getRootDirectory();\n})();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/18b23d5/packages/api/src/result-reader/BaseResultReader.ts#L72"},"api/src/result-reader/BaseResultReader.ts:72"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getsnapshotfiles"},(0,r.kt)("a",{id:"getsnapshotfiles"}),(0,r.kt)("strong",{parentName:"h3"},"getSnapshotFiles"),"()"),(0,r.kt)("p",null,"get all snapshot files related to this SnapshotResultReader"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"[] | an array of snapshot file's absolute path")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {SnapshotResultReader} = require('@memlab/api');\n\n// baseline, target, and final are file paths of heap snapshot files\nconst reader = SnapshotResultReader.fromSnapshots(baseline, target, final);\nconst paths = reader.getSnapshotFiles();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/18b23d5/packages/api/src/result-reader/SnapshotResultReader.ts#L132"},"api/src/result-reader/SnapshotResultReader.ts:132"))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"static-fromsnapshotsbaselinesnapshot-targetsnapshot-finalsnapshot"},(0,r.kt)("a",{id:"fromsnapshots"}),(0,r.kt)("inlineCode",{parentName:"h3"},"Static")," ",(0,r.kt)("strong",{parentName:"h3"},"fromSnapshots"),"(",(0,r.kt)("inlineCode",{parentName:"h3"},"baselineSnapshot"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"targetSnapshot"),", ",(0,r.kt)("inlineCode",{parentName:"h3"},"finalSnapshot"),")"),(0,r.kt)("p",null,"Build a result reader from baseline, target, and final heap snapshot files.\nThe three snapshot files do not have to be in the same directory."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"baselineSnapshot"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | file path of the baseline heap snapshot"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"targetSnapshot"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | file path of the target heap snapshot"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"finalSnapshot"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," | file path of the final heap snapshot"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("a",{parentName:"p",href:"/memlab/docs/api/classes/api_src.SnapshotResultReader"},(0,r.kt)("inlineCode",{parentName:"a"},"SnapshotResultReader"))," | the ResultReader instance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Examples"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {SnapshotResultReader, findLeaks} = require('@memlab/api');\n\n// baseline, target, and final are file paths of heap snapshot files\nconst reader = SnapshotResultReader.fromSnapshots(baseline, target, final);\nconst leaks = await findLeaks(reader);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Source"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/memlab/blob/18b23d5/packages/api/src/result-reader/SnapshotResultReader.ts#L99"},"api/src/result-reader/SnapshotResultReader.ts:99"))))))}m.isMDXComponent=!0}}]);