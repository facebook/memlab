"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[8796],{280:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/heap-diff-164a272ca7d06556c7ea5218ff1490c0.gif"},4976:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(8168),r=(a(6540),a(5680));const i={},o="How memlab Works",s={unversionedId:"how-memlab-works",id:"how-memlab-works",title:"How memlab Works",description:"In a nutshell, memlab starts a headless Chrome browser, interacts with the page,",source:"@site/docs/how-memlab-works.md",sourceDirName:".",slug:"/how-memlab-works",permalink:"/memlab/docs/how-memlab-works",draft:!1,editUrl:"https://github.com/facebook/memlab/blob/main/website/docs/how-memlab-works.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Integrate with Test Frameworks",permalink:"/memlab/docs/guides/integrate-with-e2e-frameworks"},next:{title:"Table of contents",permalink:"/memlab/docs/api/"}},l={},p=[{value:"1. Browser Interaction",id:"1-browser-interaction",level:2},{value:"2. Heap Analysis",id:"2-heap-analysis",level:2},{value:"3. Retainer Traces for Memory Leaks",id:"3-retainer-traces-for-memory-leaks",level:2}],c={toc:p},m="wrapper";function g({components:e,...t}){return(0,r.yg)(m,(0,n.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"how-memlab-works"},"How memlab Works"),(0,r.yg)("p",null,"In a nutshell, memlab starts a headless Chrome browser, interacts with the page,\ntakes heap snapshots, and finds memory leaks by parsing, diffing, and analyzing\nheap snapshots."),(0,r.yg)("h2",{id:"1-browser-interaction"},"1. Browser Interaction"),(0,r.yg)("p",null,"For example, if we want to find memory leaks triggered by some interactions\nin a web app on a target page (",(0,r.yg)("inlineCode",{parentName:"p"},"TP"),"), memlab visits the web page in the\nfollowing order:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Visit a different page - let's call it baseline page ",(0,r.yg)("inlineCode",{parentName:"li"},"BP")," and take a\nheap snapshot named ",(0,r.yg)("inlineCode",{parentName:"li"},"SBP"),(0,r.yg)("em",{parentName:"li"},"(the baseline page is specified by the ",(0,r.yg)("strong",{parentName:"em"},(0,r.yg)("inlineCode",{parentName:"strong"},"url")),"\ncallback in ",(0,r.yg)("a",{parentName:"em",href:"/memlab/docs/api/interfaces/core_src.IScenario"},"test scenario"),")")),(0,r.yg)("li",{parentName:"ul"},"Visit the target page ",(0,r.yg)("inlineCode",{parentName:"li"},"TP")," or trigger the target interactions and take\nanother heap snapshot ",(0,r.yg)("inlineCode",{parentName:"li"},"STP"),(0,r.yg)("em",{parentName:"li"},"(navigating to the target page or triggering the target interactions are\nspecified by the ",(0,r.yg)("strong",{parentName:"em"},(0,r.yg)("inlineCode",{parentName:"strong"},"action"))," callback in\n",(0,r.yg)("a",{parentName:"em",href:"/memlab/docs/api/interfaces/core_src.IScenario"},"test scenario"),")")),(0,r.yg)("li",{parentName:"ul"},"Finally, navigate to a different page or use any in-page interaction to\ntrigger the releasing of memory that is supposed to be released from the\ntarget page. Here we reach the final state (",(0,r.yg)("inlineCode",{parentName:"li"},"FP"),"), and take the final heap\nsnapshot ",(0,r.yg)("inlineCode",{parentName:"li"},"SFP"),".\nFor example, in this step, you can close the widget opened by the target\ninteractions, or return to the baseline page.\n",(0,r.yg)("em",{parentName:"li"},"(the final navigation or interaction is specified by the ",(0,r.yg)("strong",{parentName:"em"},(0,r.yg)("inlineCode",{parentName:"strong"},"back")),"\ncallback in ",(0,r.yg)("a",{parentName:"em",href:"/memlab/docs/api/interfaces/core_src.IScenario"},"test scenario"),")"))),(0,r.yg)("p",null,"With these heap snapshots, memlab finds memory leaks as explained\nin the next section."),(0,r.yg)("h2",{id:"2-heap-analysis"},"2. Heap Analysis"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Snapshot decoding"),": memlab decodes V8 (or hermes) heap snapshots and\nprovides ",(0,r.yg)("a",{parentName:"p",href:"/memlab/docs/api/interfaces/core_src.IHeapSnapshot"},"APIs")," that allows\nquerying JavaScript heap."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Leak detection"),": A superset of objects leaked from the target page can\nbe derived as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-math"},"(STP \\ SBP) \u2229 SFP\n")),(0,r.yg)("p",null,"MemLab first gets a set of allocated objects in ",(0,r.yg)("inlineCode",{parentName:"p"},"TP")," (target interaction)\nby excluding ",(0,r.yg)("inlineCode",{parentName:"p"},"SBP"),"'s objects (object allocated from the baseline page)\nfrom ",(0,r.yg)("inlineCode",{parentName:"p"},"STP")," (target heap snapshot)."),(0,r.yg)("p",null,"Then it takes an intersection with objects in ",(0,r.yg)("inlineCode",{parentName:"p"},"FP")," (object remaining on the\nfinal page) to get objects that:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"are allocated from target interaction (",(0,r.yg)("inlineCode",{parentName:"li"},"TP"),")"),(0,r.yg)("li",{parentName:"ol"},"but remain alive when those objects are supposed to be released.")),(0,r.yg)("p",null,"The built-in leak detectors use domain-specific heuristics to further refine\nthe list of leaked objects (e.g., detached DOM elements, error stack trace, etc.\nmemlab also identifies React Fiber tree and detects unmounted Fiber nodes)."),(0,r.yg)("h2",{id:"3-retainer-traces-for-memory-leaks"},"3. Retainer Traces for Memory Leaks"),(0,r.yg)("p",null,"memlab generates retainer traces from GC roots to leaked objects. Sometimes\ncertain interactions could trigger thousands of leaked objects, it would be\noverwhelming to show all the retainer traces. memlab clusters all retainer\ntraces and only shows one retainer trace for each memory leak cluster."),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(280).A,width:"2030",height:"982"})),(0,r.yg)("p",null,"In the animation, A represents the BP (baseline page), B represents the\nTP (target page), and A' represents the FP (final page)."))}g.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>h});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach(function(t){r(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef(function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(l,".").concat(d)]||m[d]||g[d]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))});function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);