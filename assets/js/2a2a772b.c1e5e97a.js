"use strict";(self.webpackChunkmemlab_website=self.webpackChunkmemlab_website||[]).push([[1901],{5680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>N});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var g=t.createContext({}),s=function(e){var n=t.useContext(g),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,g=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=s(a),u=r,N=p["".concat(g,".").concat(u)]||p[u]||y[u]||l;return a?t.createElement(N,i(i({ref:n},m),{},{components:a})):t.createElement(N,i({ref:n},m))}));function N(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5462:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=a(8168),r=(a(6540),a(5680));const l={},i="Command Line Interface",o={unversionedId:"cli/CLI-commands",id:"cli/CLI-commands",title:"Command Line Interface",description:"Install the memlab command line tool with npm:",source:"@site/docs/cli/CLI-commands.md",sourceDirName:"cli",slug:"/cli/CLI-commands",permalink:"/memlab/docs/cli/CLI-commands",draft:!1,editUrl:"https://github.com/facebook/memlab/blob/main/website/docs/cli/CLI-commands.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/memlab/docs/getting-started"},next:{title:"Detect Leaks in a Demo App",permalink:"/memlab/docs/guides/guides-detached-dom"}},g={},s=[{value:"COMMON Commands",id:"common-commands",level:2},{value:"memlab run",id:"memlab-run",level:3},{value:"examples",id:"examples",level:4},{value:"memlab find-leaks",id:"memlab-find-leaks",level:3},{value:"examples",id:"examples-1",level:4},{value:"memlab diff-leaks",id:"memlab-diff-leaks",level:3},{value:"memlab trace",id:"memlab-trace",level:3},{value:"examples",id:"examples-2",level:4},{value:"memlab analyze",id:"memlab-analyze",level:3},{value:"memlab analyze unbound-collection",id:"memlab-analyze-unbound-collection",level:4},{value:"memlab analyze collections-with-stale",id:"memlab-analyze-collections-with-stale",level:4},{value:"memlab analyze detached-DOM",id:"memlab-analyze-detached-dom",level:4},{value:"memlab analyze global-variable",id:"memlab-analyze-global-variable",level:4},{value:"memlab analyze object",id:"memlab-analyze-object",level:4},{value:"memlab analyze object-fanout",id:"memlab-analyze-object-fanout",level:4},{value:"memlab analyze object-shallow",id:"memlab-analyze-object-shallow",level:4},{value:"memlab analyze shape",id:"memlab-analyze-shape",level:4},{value:"memlab analyze object-size",id:"memlab-analyze-object-size",level:4},{value:"memlab analyze unbound-object",id:"memlab-analyze-unbound-object",level:4},{value:"memlab analyze react-hooks",id:"memlab-analyze-react-hooks",level:4},{value:"memlab analyze unbound-shape",id:"memlab-analyze-unbound-shape",level:4},{value:"memlab analyze string",id:"memlab-analyze-string",level:4},{value:"memlab analyze unmounted-fiber-node",id:"memlab-analyze-unmounted-fiber-node",level:4},{value:"memlab heap",id:"memlab-heap",level:3},{value:"memlab view-heap",id:"memlab-view-heap",level:3},{value:"MISC Commands",id:"misc-commands",level:2},{value:"memlab version",id:"memlab-version",level:3},{value:"memlab list",id:"memlab-list",level:3},{value:"memlab reset",id:"memlab-reset",level:3},{value:"memlab measure",id:"memlab-measure",level:3},{value:"examples",id:"examples-3",level:4},{value:"memlab warmup",id:"memlab-warmup",level:3},{value:"examples",id:"examples-4",level:4},{value:"memlab help",id:"memlab-help",level:3},{value:"memlab get-default-work-dir",id:"memlab-get-default-work-dir",level:3},{value:"memlab snapshot",id:"memlab-snapshot",level:3},{value:"examples",id:"examples-5",level:4},{value:"memlab warmup-and-snapshot",id:"memlab-warmup-and-snapshot",level:3},{value:"examples",id:"examples-6",level:4}],m={toc:s},p="wrapper";function y(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,t.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"command-line-interface"},"Command Line Interface"),(0,r.yg)("p",null,"Install the memlab command line tool with npm:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install -g memlab\n")),(0,r.yg)("h2",{id:"common-commands"},"COMMON Commands"),(0,r.yg)("h3",{id:"memlab-run"},"memlab run"),(0,r.yg)("p",null,"Find memory leaks in web apps"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab run --scenario <TEST_SCENARIO_FILE>\n")),(0,r.yg)("h4",{id:"examples"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab run --scenario /tmp/test-scenario.js\nmemlab run --scenario /tmp/test-scenario.js --work-dir /tmp/test-1/\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--headful")),": start the browser in headful mode, by default it is headless"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--full")),": take heap snapshot for every step in E2E interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-screenshot")),": skip taking screenshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-gc")),": skip doing garbage collection in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-scroll")),": skip scrolling target page in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-extra-ops")),": skip doing extra interactions (e.g., scrolling and waiting) on target and final page"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--local-puppeteer")),": enable remote browser instance debugging via local puppeteer"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--scenario")),": set file path loading test scenario"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--chromium-binary")),": set the chromium binary for E2E run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--protocol-timeout")),": set the protocol timeout for chromium connection (in ms).\nThe current default value is 180000, you may want to increase the timeout via this flag when the heap snapshot is too big (e.g., over 1GB) and the Page crashed with error: 'ProtocolError: HeapProfiler.takeHeapSnapshot timed out'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--device")),": set the device type to emulate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--user-agent")),": set the UserAgent string in browser (for E2E interaction), otherwise it uses the default UserAgent from Chromium"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-xvfb")),": disable Xvfb (X virtual framebuffer) for simulating headful browser rendering"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-web-security")),": disable web security in Chromium to enable cross domain requests; web security is enabled by default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--rewrite-js")),": enable instrument JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--log-script")),": enable intercepting and logging JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--worker")),": set title of the target (worker) that needs to be selected and analyzed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--leak-filter")),": specify a definition JS file for leak filter"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-object-size-above")),": objects with retained size (bytes) bigger than the threshold will be considered as leaks"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ignore-leak-cluster-size-below")),": ignore memory leaks with aggregated retained size smaller than the threshold (in bytes)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-all-objects")),": dump retainer trace for all allocated objects (ignore the leak filter), available option modes: --trace-all-objects=selected-js-objects, --trace-all-objects=default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--save-trace-as-unclassified-cluster")),": dump each retainer trace as an unclassified trace cluster"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering")),": use machine learning algorithms for clustering leak traces (by default, traces are clustered by heuristics)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-linkage-max-dist")),": set linkage max distance value for clustering. The value should be between ","[0, 1]"," inclusive."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering-max-df")),": set percentage based max document frequency for limiting the terms that appear too often"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--clean-up-snapshot")),": clean up heap snapshots after running"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-find-leaks"},"memlab find-leaks"),(0,r.yg)("p",null,"Find memory leaks in heap snapshots"),(0,r.yg)("p",null,"There are three ways to specify inputs for the ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab find-leaks")," command:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"--baseline"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"--target"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"--final")," specifies each heap snapshot input individually;"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"--snapshot-dir")," specifies the directory that holds all three heap snapshot files (MemLab will assign baseline, target, and final based on alphabetic order of the file);"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"--work-dir")," specifies the output working directory of the ",(0,r.yg)("inlineCode",{parentName:"li"},"memlab run")," or the ",(0,r.yg)("inlineCode",{parentName:"li"},"memlab snapshot")," command;")),(0,r.yg)("p",null,"Please only use one of the three ways to specify the input."),(0,r.yg)("p",null,"You can also manually take heap snapshots in Chrome Devtools, save them to disk.\nThen process them using this command with the CLI flags (either option 1\nor option 2 mentioned above)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# check memory leaks in the default working directory generated by\n# memlab run (without setting the --work-dir option)\nmemlab find-leaks \n")),(0,r.yg)("h4",{id:"examples-1"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# specify the baseline, target, and final heap snapshot file path separately\nmemlab find-leaks --baseline /tmp/baseline.heapsnapshot --target /tmp/target.heapsnapshot --final /tmp/final.heapsnapshot\n# specifies the directory that holds all three heap snapshot files\nmemlab find-leaks --snapshot-dir /dir/containing/heapsnapshot/files/\n# specifies the output working directory of the `memlab run` or the `memlab snapshot` command\nmemlab find-leaks --work-dir /memlab/working/dir/generated/by/memlab/\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--baseline")),": set file path of the baseline heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--target")),": set file path of the target heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--final")),": set file path of the final heap snapshot"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot-dir")),": set directory path containing all heap snapshots under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--engine")),": set the JavaScript engine (default to V8)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--leak-filter")),": specify a definition JS file for leak filter"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-object-size-above")),": objects with retained size (bytes) bigger than the threshold will be considered as leaks"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ignore-leak-cluster-size-below")),": ignore memory leaks with aggregated retained size smaller than the threshold (in bytes)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-all-objects")),": dump retainer trace for all allocated objects (ignore the leak filter), available option modes: --trace-all-objects=selected-js-objects, --trace-all-objects=default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--save-trace-as-unclassified-cluster")),": dump each retainer trace as an unclassified trace cluster"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering")),": use machine learning algorithms for clustering leak traces (by default, traces are clustered by heuristics)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-linkage-max-dist")),": set linkage max distance value for clustering. The value should be between ","[0, 1]"," inclusive."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering-max-df")),": set percentage based max document frequency for limiting the terms that appear too often"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--clean-up-snapshot")),": clean up heap snapshots after running"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-diff-leaks"},"memlab diff-leaks"),(0,r.yg)("p",null,"Find new memory leaks by diffing control and test heap snapshots"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab diff-leaks \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--control-snapshot")),": set the single (target) snapshot of control run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--control-work-dir")),": set the working directory of the control run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--treatment-snapshot")),": set the single (target) snapshot of treatment run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--treatment-work-dir")),": set the working directory of the treatment run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--engine")),": set the JavaScript engine (default to V8)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--leak-filter")),": specify a definition JS file for leak filter"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-object-size-above")),": objects with retained size (bytes) bigger than the threshold will be considered as leaks"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ignore-leak-cluster-size-below")),": ignore memory leaks with aggregated retained size smaller than the threshold (in bytes)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-all-objects")),": dump retainer trace for all allocated objects (ignore the leak filter), available option modes: --trace-all-objects=selected-js-objects, --trace-all-objects=default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--save-trace-as-unclassified-cluster")),": dump each retainer trace as an unclassified trace cluster"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering")),": use machine learning algorithms for clustering leak traces (by default, traces are clustered by heuristics)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-linkage-max-dist")),": set linkage max distance value for clustering. The value should be between ","[0, 1]"," inclusive."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering-max-df")),": set percentage based max document frequency for limiting the terms that appear too often"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--max-cluster-sample-size")),": specify the max number of leak traces as input to leak trace clustering algorithm. Big sample size will preserve more complete inforrmation, but may risk out-of-memory crash."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--trace-contains")),": set the node name or edge name to filter leak traces that contain the name"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-trace"},"memlab trace"),(0,r.yg)("p",null,"Report retainer trace of a specific node, use with --nodeId"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab trace --node-id=<HEAP_OBJECT_ID>\n")),(0,r.yg)("h4",{id:"examples-2"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab trace --node-id=@3123123\nmemlab trace --node-id=128127\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot-dir")),": set directory path containing all heap snapshots under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--engine")),": set the JavaScript engine (default to V8)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--node-id")),": set heap node ID"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-analyze"},"memlab analyze"),(0,r.yg)("p",null,"Run heap analysis on heap snapshots."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze <PLUGIN_NAME> [PLUGIN_OPTIONS]\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--analysis-plugin")),": specify the external heap analysis plugin file (must be a vanilla JS file ended with ",(0,r.yg)("inlineCode",{parentName:"li"},"Analysis.js")," suffix)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-unbound-collection"},"memlab analyze unbound-collection"),(0,r.yg)("p",null,"Check unbound collection growth (e.g., Map with growing number of entries)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze unbound-collection \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot-dir")),": set directory path containing all heap snapshots under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-collections-with-stale"},"memlab analyze collections-with-stale"),(0,r.yg)("p",null,"Analyze collections holding stale objects"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze collections-with-stale \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--output")),": specify output format of the analysis (defaults to text)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-detached-dom"},"memlab analyze detached-DOM"),(0,r.yg)("p",null,"Get detached DOM elements"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze detached-DOM \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-global-variable"},"memlab analyze global-variable"),(0,r.yg)("p",null,"Get global variables in heap"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze global-variable \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-object"},"memlab analyze object"),(0,r.yg)("p",null,"Get properties inside an object"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze object \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--node-id")),": set heap node ID"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--output")),": specify output format of the analysis (defaults to text)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-object-fanout"},"memlab analyze object-fanout"),(0,r.yg)("p",null,"Get objects with the most out-going references in heap"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze object-fanout \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-object-shallow"},"memlab analyze object-shallow"),(0,r.yg)("p",null,"Get objects by key and value, without recursing into sub-objects"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze object-shallow \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-shape"},"memlab analyze shape"),(0,r.yg)("p",null,"List the shapes that retained most memory"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze shape \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-object-size"},"memlab analyze object-size"),(0,r.yg)("p",null,"Get the largest objects in heap"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze object-size \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-unbound-object"},"memlab analyze unbound-object"),(0,r.yg)("p",null,"Check unbound object growth (a single object with growing retained size)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze unbound-object \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot-dir")),": set directory path containing all heap snapshots under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-react-hooks"},"memlab analyze react-hooks"),(0,r.yg)("p",null,"Show a memory breakdown of the most memory-consuming React components and their React hooks. This works best with unminified heap snapshots taken from React apps running in Dev mode. But also supports minified heap snapshots taken from React apps in production mode."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze react-hooks \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-unbound-shape"},"memlab analyze unbound-shape"),(0,r.yg)("p",null,"Get shapes with unbound growth (a class of objects with growing aggregated retained size)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze unbound-shape \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot-dir")),": set directory path containing all heap snapshots under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-string"},"memlab analyze string"),(0,r.yg)("p",null,"Find duplicated string instances in heap"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze string \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h4",{id:"memlab-analyze-unmounted-fiber-node"},"memlab analyze unmounted-fiber-node"),(0,r.yg)("p",null,"Get unmounted React Fiber nodes"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab analyze unmounted-fiber-node \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-heap"},"memlab heap"),(0,r.yg)("p",null,"Interactive command to explore a single heap snapshot"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab heap --snapshot <HEAP_SNAPSHOT_FILE>\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--engine")),": set the JavaScript engine (default to V8)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-view-heap"},"memlab view-heap"),(0,r.yg)("p",null,"Interactive command to view a single heap snapshot"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab view-heap --snapshot <HEAP_SNAPSHOT_FILE>\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--snapshot")),": set file path of the heap snapshot under analysis"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--engine")),": set the JavaScript engine (default to V8)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--node-id")),": set heap node ID"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--ml-clustering")),": use machine learning algorithms for clustering leak traces (by default, traces are clustered by heuristics)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--heap-parser-dict-fast-store-size")),": the size threshold for swtiching from fast store to slower store in the heap snapshot parser. The default value is 5,000,000. If you get the ",(0,r.yg)("inlineCode",{parentName:"li"},"FATAL ERROR: invalid table size Allocation failed - JavaScript heap out of memory")," error, try to decrease the threshold here"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h2",{id:"misc-commands"},"MISC Commands"),(0,r.yg)("h3",{id:"memlab-version"},"memlab version"),(0,r.yg)("p",null,"Show the versions of all memlab packages installed"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab version \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-list"},"memlab list"),(0,r.yg)("p",null,"List all test scenarios"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab list \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-reset"},"memlab reset"),(0,r.yg)("p",null,"Reset and initialize all directories"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab reset \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-measure"},"memlab measure"),(0,r.yg)("p",null,"Run test scenario in measure mode"),(0,r.yg)("p",null,"In some web apps, the heap size can show considerable variability across various runs. This fluctuation can often make it hard to understand the impact of memory leaks. The introduction of the measure mode aims to address this challenge by executing the same scenario repetitively, therefore getting multiple data points of JavaScript heap sizes. This can help understand if the heap size movements during specific runs come from memory-related issues or just noise."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab measure --scenario <TEST_SCENARIO_FILE>\n")),(0,r.yg)("h4",{id:"examples-3"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab measure --scenario /tmp/test-scenario.js\nmemlab measure --scenario /tmp/test-scenario.js --work-dir /tmp/test-1/\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--headful")),": start the browser in headful mode, by default it is headless"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--run-num")),": set number of runs"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--app")),": set name for onboarded web application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--interaction")),": set name for onboarded interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--full")),": take heap snapshot for every step in E2E interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-snapshot")),": skip taking heap snapshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-screenshot")),": skip taking screenshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-gc")),": skip doing garbage collection in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-scroll")),": skip scrolling target page in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-extra-ops")),": skip doing extra interactions (e.g., scrolling and waiting) on target and final page"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--run-mode")),": set running mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--local-puppeteer")),": enable remote browser instance debugging via local puppeteer"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--scenario")),": set file path loading test scenario"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--chromium-binary")),": set the chromium binary for E2E run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--protocol-timeout")),": set the protocol timeout for chromium connection (in ms).\nThe current default value is 180000, you may want to increase the timeout via this flag when the heap snapshot is too big (e.g., over 1GB) and the Page crashed with error: 'ProtocolError: HeapProfiler.takeHeapSnapshot timed out'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--device")),": set the device type to emulate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--user-agent")),": set the UserAgent string in browser (for E2E interaction), otherwise it uses the default UserAgent from Chromium"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-xvfb")),": disable Xvfb (X virtual framebuffer) for simulating headful browser rendering"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-web-security")),": disable web security in Chromium to enable cross domain requests; web security is enabled by default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--rewrite-js")),": enable instrument JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--log-script")),": enable intercepting and logging JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-warmup"},"memlab warmup"),(0,r.yg)("p",null,"Warm up the target app"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab warmup --scenario <TEST_SCENARIO_FILE>\n")),(0,r.yg)("h4",{id:"examples-4"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab warmup --scenario /tmp/test-scenario.js\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--headful")),": start the browser in headful mode, by default it is headless"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--app")),": set name for onboarded web application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--interaction")),": set name for onboarded interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--run-mode")),": set running mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--local-puppeteer")),": enable remote browser instance debugging via local puppeteer"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--scenario")),": set file path loading test scenario"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--chromium-binary")),": set the chromium binary for E2E run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--protocol-timeout")),": set the protocol timeout for chromium connection (in ms).\nThe current default value is 180000, you may want to increase the timeout via this flag when the heap snapshot is too big (e.g., over 1GB) and the Page crashed with error: 'ProtocolError: HeapProfiler.takeHeapSnapshot timed out'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--device")),": set the device type to emulate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--user-agent")),": set the UserAgent string in browser (for E2E interaction), otherwise it uses the default UserAgent from Chromium"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-xvfb")),": disable Xvfb (X virtual framebuffer) for simulating headful browser rendering"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-web-security")),": disable web security in Chromium to enable cross domain requests; web security is enabled by default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-warmup")),": skip warming up web server"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--rewrite-js")),": enable instrument JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--log-script")),": enable intercepting and logging JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-help"},"memlab help"),(0,r.yg)("p",null,"List all MemLab CLI commands or print helper text for a specific command"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab help <COMMAND> [SUB-COMMANDS]\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-get-default-work-dir"},"memlab get-default-work-dir"),(0,r.yg)("p",null,"Query the default working directory"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab get-default-work-dir \n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-snapshot"},"memlab snapshot"),(0,r.yg)("p",null,"Interact with web app and take heap snapshots"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab snapshot --scenario <TEST_SCENARIO_FILE>\n")),(0,r.yg)("h4",{id:"examples-5"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab snapshot --scenario /tmp/test-scenario.js\nmemlab snapshot --scenario /tmp/test-scenario.js --work-dir /tmp/test-1/\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--headful")),": start the browser in headful mode, by default it is headless"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--app")),": set name for onboarded web application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--interaction")),": set name for onboarded interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--full")),": take heap snapshot for every step in E2E interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-snapshot")),": skip taking heap snapshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-screenshot")),": skip taking screenshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-gc")),": skip doing garbage collection in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-scroll")),": skip scrolling target page in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-extra-ops")),": skip doing extra interactions (e.g., scrolling and waiting) on target and final page"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--run-mode")),": set running mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--local-puppeteer")),": enable remote browser instance debugging via local puppeteer"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--scenario")),": set file path loading test scenario"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--chromium-binary")),": set the chromium binary for E2E run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--protocol-timeout")),": set the protocol timeout for chromium connection (in ms).\nThe current default value is 180000, you may want to increase the timeout via this flag when the heap snapshot is too big (e.g., over 1GB) and the Page crashed with error: 'ProtocolError: HeapProfiler.takeHeapSnapshot timed out'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--device")),": set the device type to emulate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--user-agent")),": set the UserAgent string in browser (for E2E interaction), otherwise it uses the default UserAgent from Chromium"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-xvfb")),": disable Xvfb (X virtual framebuffer) for simulating headful browser rendering"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-web-security")),": disable web security in Chromium to enable cross domain requests; web security is enabled by default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--rewrite-js")),": enable instrument JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--log-script")),": enable intercepting and logging JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--worker")),": set title of the target (worker) that needs to be selected and analyzed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")),(0,r.yg)("h3",{id:"memlab-warmup-and-snapshot"},"memlab warmup-and-snapshot"),(0,r.yg)("p",null,"Warm up server and take heap snapshots"),(0,r.yg)("p",null,"This is equivalent to running ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab warmup")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"memlab snapshot"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"# specify a test scenario file, memlab will warm up the server and take heap snapshots\nmemlab warmup-and-snapshot --scenario <TEST_SCENARIO_FILE>\n")),(0,r.yg)("h4",{id:"examples-6"},"examples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"memlab warmup-and-snapshot --scenario /tmp/test-scenario.js\n# set the working directory of the current run\nmemlab warmup-and-snapshot --scenario /tmp/test-scenario.js --work-dir /tmp/test-1/\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Options"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--work-dir")),": set the working directory of the current run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--headful")),": start the browser in headful mode, by default it is headless"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--app")),": set name for onboarded web application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--interaction")),": set name for onboarded interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--run-mode")),": set running mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--local-puppeteer")),": enable remote browser instance debugging via local puppeteer"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--scenario")),": set file path loading test scenario"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--chromium-binary")),": set the chromium binary for E2E run"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--protocol-timeout")),": set the protocol timeout for chromium connection (in ms).\nThe current default value is 180000, you may want to increase the timeout via this flag when the heap snapshot is too big (e.g., over 1GB) and the Page crashed with error: 'ProtocolError: HeapProfiler.takeHeapSnapshot timed out'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--device")),": set the device type to emulate"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--user-agent")),": set the UserAgent string in browser (for E2E interaction), otherwise it uses the default UserAgent from Chromium"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-xvfb")),": disable Xvfb (X virtual framebuffer) for simulating headful browser rendering"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--disable-web-security")),": disable web security in Chromium to enable cross domain requests; web security is enabled by default"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-warmup")),": skip warming up web server"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--rewrite-js")),": enable instrument JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--log-script")),": enable intercepting and logging JavaScript code in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--full")),": take heap snapshot for every step in E2E interaction"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-snapshot")),": skip taking heap snapshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-screenshot")),": skip taking screenshots"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-gc")),": skip doing garbage collection in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-scroll")),": skip scrolling target page in browser"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--skip-extra-ops")),": skip doing extra interactions (e.g., scrolling and waiting) on target and final page"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--worker")),": set title of the target (worker) that needs to be selected and analyzed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--help")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-h")),": print helper text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--verbose")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-v")),": show more details"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--sc")),": set to continuous test mode"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--debug")),": enable manual debugging"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"--silent")),", ",(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"-s")),": mute all terminal output")))}y.isMDXComponent=!0}}]);